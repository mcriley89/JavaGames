//This is the Class being called into the TicTacToe Main Method
public class TTT {
	//set main variables
	 private char[][] board;
	    private char currentPlayerMark;

	    public TTT() { //begin
	        board = new char[3][3];
	        currentPlayerMark = 'x';
	        initializeBoard();
	    }
	    //Find currentPlayer
	    public char getCurrentPlayerMark()
	    {
	        return currentPlayerMark;
	    }
	    // Reset the Game Board
	    public void initializeBoard() {

	        // Loop through rows and columns
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                board[i][j] = '-';
	            }
	        }
	    }
	    // Print the current game board
	    public void printBoard() {
	        System.out.println("-------------");

	        for (int i = 0; i < 3; i++) {
	            System.out.print("| ");
	            for (int j = 0; j < 3; j++) {
	                System.out.print(board[i][j] + " | ");
	            }
	            System.out.println();
	            System.out.println("-------------");
	        }
	    }
	    // Loop through the cells in the board, if any are empty (contains char '-') returns false
	    public boolean isBoardFull() {
	        boolean isFull = true;

	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                if (board[i][j] == '-') {
	                    isFull = false;
	                }
	            }
	        }
	        return isFull;// The board is full
	    }
	    //If there is a win, returns true
	    //Calls other win-check functions to check the entire board
	    public boolean checkForWin() {
	        return (checkRowsForWin() || checkColumnsForWin() || checkDiagonalsForWin());
	    }
	    //Loop through rows, check for win
	    private boolean checkRowsForWin() {
	        for (int i = 0; i < 3; i++) {
	            if (checkRowCol(board[i][0], board[i][1], board[i][2]) == true) {
	                return true;
	            }
	        }
	        return false;
	    }
	    //Loop through columns, check for win
	    private boolean checkColumnsForWin() {
	        for (int i = 0; i < 3; i++) {
	            if (checkRowCol(board[0][i], board[1][i], board[2][i]) == true) {
	                return true;
	            }
	        }
	        return false;
	    }
	    //Check diagonally for win
	    private boolean checkDiagonalsForWin() {
	        return ((checkRowCol(board[0][0], board[1][1], board[2][2]) == true) || (checkRowCol(board[0][2], board[1][1], board[2][0]) == true));
	    }
	    //Check to see if all three values are the same
	    private boolean checkRowCol(char c1, char c2, char c3) {
	        return ((c1 != '-') && (c1 == c2) && (c2 == c3));
	    }
	    //Switch Players
	    public void changePlayer() {
	        if (currentPlayerMark == 'x') {
	            currentPlayerMark = 'o';
	        }
	        else {
	            currentPlayerMark = 'x';
	        }
	    }
	    //Places player mark at the cell specified by row and column
	    public boolean placeMark(int row, int col) {

	        // Make sure that row and column are within the board
	        if ((row >= 0) && (row < 3)) {
	            if ((col >= 0) && (col < 3)) {
	                if (board[row][col] == '-') {
	                    board[row][col] = currentPlayerMark;
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	}